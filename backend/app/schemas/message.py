"""
Message Schema Definitions

This module defines Pydantic schemas for message-related operations
in the helpdesk system, including real-time chat functionality.
"""

from pydantic import BaseModel, Field, ConfigDict, field_validator
from typing import Optional
from datetime import datetime
from enum import Enum


class MessageRole(str, Enum):
    """Enum for message sender roles"""
    USER = "user"
    IT_AGENT = "it_agent"
    HR_AGENT = "hr_agent"
    ADMIN = "admin"


class MessageType(str, Enum):
    """Enum for message types"""
    USER_MESSAGE = "user_message"
    AGENT_MESSAGE = "agent_message"
    SYSTEM_MESSAGE = "system_message"


class MessageFeedback(str, Enum):
    """Enum for message feedback ratings"""
    UP = "up"
    DOWN = "down"
    NONE = "none"


class MessageCreateSchema(BaseModel):
    """Schema for creating new messages"""
    
    content: str = Field(
        ..., 
        min_length=1, 
        max_length=1000, 
        description="Message content (1-1000 characters)"
    )
    message_type: MessageType = Field(
        default=MessageType.USER_MESSAGE,
        description="Type of message being sent"
    )
    isAI: bool = Field(
        default=False,
        description="Whether this message was generated by AI"
    )
    feedback: MessageFeedback = Field(
        default=MessageFeedback.NONE,
        description="Feedback rating for the message"
    )

    @field_validator('content')
    @classmethod
    def validate_content(cls, v: str) -> str:
        """Validate and clean message content"""
        if not isinstance(v, str):
            raise ValueError("Content must be a string")
        
        # Strip whitespace
        v = v.strip()
        
        if not v:
            raise ValueError("Content cannot be empty or only whitespace")
        
        if len(v) > 1000:
            raise ValueError("Content cannot exceed 1000 characters")
            
        return v

    model_config = ConfigDict(
        str_strip_whitespace=True,
        validate_assignment=True,
        extra="forbid"
    )


class MessageSchema(BaseModel):
    """Schema for message responses"""
    
    id: Optional[str] = Field(None, description="MongoDB ObjectId as string")
    ticket_id: str = Field(..., description="Associated ticket ID")
    sender_id: str = Field(..., description="Message sender ID")
    sender_role: MessageRole = Field(..., description="Role of message sender")
    message_type: MessageType = Field(..., description="Type of message")
    content: str = Field(..., description="Message content")
    isAI: bool = Field(default=False, description="Whether message was AI-generated")
    feedback: MessageFeedback = Field(
        default=MessageFeedback.NONE,
        description="Feedback rating for the message"
    )
    timestamp: datetime = Field(..., description="Message timestamp")

    model_config = ConfigDict(from_attributes=True)


class WebSocketMessageSchema(BaseModel):
    """Schema for WebSocket message payloads"""
    
    type: str = Field(..., description="Message type (e.g., 'chat', 'typing', 'join', 'leave')")
    ticket_id: str = Field(..., description="Associated ticket ID")
    content: Optional[str] = Field(None, description="Message content for chat messages")
    message_type: Optional[MessageType] = Field(
        default=MessageType.USER_MESSAGE,
        description="Type of message being sent"
    )
    isAI: Optional[bool] = Field(
        default=False,
        description="Whether this message was generated by AI"
    )
    feedback: Optional[MessageFeedback] = Field(
        default=MessageFeedback.NONE,
        description="Feedback rating for the message"
    )

    @field_validator('content')
    @classmethod
    def validate_content(cls, v: Optional[str]) -> Optional[str]:
        """Validate message content if provided"""
        if v is None:
            return v
            
        if not isinstance(v, str):
            raise ValueError("Content must be a string")
        
        # Strip whitespace
        v = v.strip()
        
        if not v:
            raise ValueError("Content cannot be empty or only whitespace")
        
        if len(v) > 1000:
            raise ValueError("Content cannot exceed 1000 characters")
            
        return v

    model_config = ConfigDict(
        str_strip_whitespace=True,
        validate_assignment=True,
        extra="forbid"
    )
